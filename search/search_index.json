{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"uwotm8","text":"<p>u wot m8? Converting American English to British English</p> <p> </p> <p>LLMs are fantastic things, but sometimes they need a little help to write in the King's English. This package converts American English to British English.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install uwotm8\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from uwotm8 import convert_american_to_british_spelling\n\nen_gb_str = convert_american_to_british_spelling(\"Our American neighbors' dialog can be a bit off-color when you're used to British spelling, you recognize?\")\nprint(en_gb_str)\n</code></pre> <p>Bosh! You'll get back:</p> <p>Our American neighbours' dialogue can be a bit off-colour when you're used to British spelling, you recognise?</p> <p>Or use it on the command line:</p> <pre><code>echo \"The gray color of the theater is recognized by our neighbors.\" | uwotm8\n# Output: \"The grey colour of the theatre is recognised by our neighbours.\"\n</code></pre> <p>For complete documentation on all available features and options, see the Usage Guide.</p>"},{"location":"#features","title":"Features","text":"<p>uwotm8 intelligently preserves words in certain contexts:</p> <ul> <li>Code blocks (text within backticks)</li> <li>URLs and URIs</li> <li>Hyphenated terms (e.g., \"3-color\" remains \"3-color\" rather than becoming \"3-colour\")</li> <li>Technical terms in the ignore list (e.g., \"program\" in computing contexts)</li> </ul> <p>For detailed information on how these features work, see the Implementation Details.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Built by the Incubator for AI (i.AI), part of GDS in the Department for Science, Innovation and Technology (DSIT).</p> <p></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p> <p>Please make sure to update tests as appropriate.</p>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"abbreviations/","title":"Abbreviations","text":"<p>[i.AI]: Incubator for AI [RAG]: Retrieval Augmented Generation [GenAI]: Generative AI [LLM]: Large Language Model [LLMs]: Large Language Models [CI/CD]: Continuous Integration/Continuous Deployment [GDS]: Government Digital Service [DSIT]: Department for Science, Innovation and Technology</p>"},{"location":"modules/","title":"Implementation Details","text":""},{"location":"modules/#uwotm8.convert.convert_american_to_british_spelling","title":"uwotm8.convert.convert_american_to_british_spelling","text":"<pre><code>convert_american_to_british_spelling(text, strict=False)\n</code></pre> <p>Convert American English spelling to British English spelling.</p> PARAMETER DESCRIPTION <code>text</code> <p> TYPE: <code>str</code> </p> <code>strict</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> PARAMETER DESCRIPTION <code>text</code> <p>The text to convert.</p> <p> TYPE: <code>str</code> </p> <code>strict</code> <p>Whether to raise an exception if a word cannot be converted.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The text with American English spelling converted to British English spelling.</p> Source code in <code>uwotm8/convert.py</code> <pre><code>def convert_american_to_british_spelling(  # noqa: C901\n    text: str, strict: bool = False\n) -&gt; Any:\n    \"\"\"\n    Convert American English spelling to British English spelling.\n\n    Args:\n        text: The text to convert.\n        strict: Whether to raise an exception if a word cannot be converted.\n\n    Returns:\n        The text with American English spelling converted to British English spelling.\n    \"\"\"\n    if not text.strip():\n        return text\n    try:\n\n        def should_skip_word(word: str, pre: str, post: str, match_start: int, match_end: int) -&gt; bool:\n            \"\"\"Check if the word should be skipped for conversion.\"\"\"\n            # Skip if within code blocks\n            if \"`\" in pre or \"`\" in post:\n                return True\n\n            # Skip if word is in the ignore_list\n            if word.lower() in CONVERSION_IGNORE_LIST:\n                return True\n\n            # Check for hyphenated terms (e.g., \"3-color\", \"x-coordinate\")\n            # If the word is part of a hyphenated term, we should skip it\n            if \"-\" in pre and pre.rstrip().endswith(\"-\"):\n                return True\n\n            # Check for URL/URI context\n            line_start = text.rfind(\"\\n\", 0, match_start)\n            if line_start == -1:\n                line_start = 0\n            else:\n                line_start += 1\n\n            line_end = text.find(\"\\n\", match_end)\n            if line_end == -1:\n                line_end = len(text)\n\n            line_context = text[line_start:line_end]\n\n            # Skip if word appears to be in a URL/URI\n            return \"://\" in line_context or \"www.\" in line_context\n\n        def preserve_capitalization(original: str, replacement: str) -&gt; str:\n            \"\"\"Preserve the capitalization from the original word in the replacement.\"\"\"\n            if original.isupper():\n                return replacement.upper()\n            elif original.istitle():\n                return replacement.title()\n            return replacement\n\n        def replace_word(match: re.Match) -&gt; Any:\n            \"\"\"\n            Replace a word with its British English spelling.\n\n            Args:\n                match: The match object.\n\n            Returns:\n                The word with its spelling converted to British English.\n            \"\"\"\n            # The first group contains any leading punctuation/spaces\n            # The second group contains the word\n            # The third group contains any trailing punctuation/spaces\n            pre, word, post = match.groups()\n\n            if should_skip_word(word, pre, post, match.start(), match.end()):\n                return match.group(0)\n\n            if american_spelling_exists(word.lower()):\n                try:\n                    british = get_british_spelling(word.lower())\n                    british = preserve_capitalization(word, british)\n                    return pre + british + post\n                except Exception:\n                    if strict:\n                        raise\n            return match.group(0)\n\n        # Match any word surrounded by non-letter characters\n        # Group 1: Leading non-letters (including empty)\n        # Group 2: The word itself (only letters)\n        # Group 3: Trailing non-letters (including empty)\n        pattern = r\"([^a-zA-Z]*?)([a-zA-Z]+)([^a-zA-Z]*?)\"\n        return re.sub(pattern, replace_word, text)\n    except Exception:\n        if strict:\n            raise\n        return text\n</code></pre>"},{"location":"modules/#word-context-detection","title":"Word Context Detection","text":"<p>The <code>convert_american_to_british_spelling</code> function includes special handling for various text contexts:</p>"},{"location":"modules/#hyphenated-terms","title":"Hyphenated Terms","text":"<p>Words that are part of hyphenated terms are preserved in their original form. For example:</p> <ul> <li>\"3-color\" remains \"3-color\" (not converted to \"3-colour\")</li> <li>\"x-coordinate\" remains \"x-coordinate\" (not converted to \"x-coordinate\")</li> <li>\"multi-colored\" remains \"multi-colored\" (not converted to \"multi-coloured\")</li> </ul> <p>This is useful for preserving technical terminology and compound adjectives where conversion might be inappropriate.</p>"},{"location":"modules/#code-blocks","title":"Code Blocks","text":"<p>Words within code blocks (surrounded by backticks) are not converted, preserving code syntax and variable names.</p>"},{"location":"modules/#urls-and-uris","title":"URLs and URIs","text":"<p>Words that appear in lines containing URLs or URIs (identified by \"://\" or \"www.\") are not converted to avoid breaking links.</p>"},{"location":"modules/#conversion-ignore-list","title":"Conversion Ignore List","text":"<p>An ignore list of words that should not be converted is maintained, including technical terms that have different meanings in different contexts:</p> <ul> <li>\"program\" vs \"programme\" (in computing contexts)</li> <li>\"disk\" vs \"disc\" (in computing contexts)</li> <li>\"analog\" vs \"analogue\" (in technical contexts)</li> <li>And others</li> </ul>"},{"location":"modules/#capitalization-preservation","title":"Capitalization Preservation","text":"<p>The function preserves the capitalization pattern of the original word:</p> <ul> <li>ALL CAPS words remain ALL CAPS</li> <li>Title Case words remain Title Case</li> <li>lowercase words remain lowercase</li> </ul>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#command-line-usage","title":"Command Line Usage","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>Convert a single file:</p> <pre><code>uwotm8 example.txt\n</code></pre> <p>Convert multiple files:</p> <pre><code>uwotm8 file1.txt file2.md file3.py\n</code></pre> <p>Process an entire directory:</p> <pre><code>uwotm8 ./my_project/\n</code></pre> <p>Read from stdin and write to stdout:</p> <pre><code>echo \"I love the color gray and my favorite food is filet mignon.\" | uwotm8\n# Output: \"I love the colour grey and my favourite food is filet mignon.\"\n</code></pre>"},{"location":"usage/#command-line-options","title":"Command Line Options","text":"<pre><code>usage: uwotm8 [-h] [--check] [--strict] [--comments-only] [--include INCLUDE [INCLUDE ...]] [--exclude EXCLUDE [EXCLUDE ...]] [-o OUTPUT] [--version] [src ...]\n\nConvert American English spelling to British English spelling.\n\npositional arguments:\n  src                   Files or directories to convert. If not provided, reads from stdin.\n\noptions:\n  -h, --help            show this help message and exit\n  --check               Don't write the files back, just return status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted.\n  --strict              Raise an exception if a word cannot be converted.\n  --comments-only       For Python files, only convert comments and docstrings, leaving code unchanged.\n  --include INCLUDE [INCLUDE ...]\n                        File extensions to include when processing directories. Default: .py .txt .md\n  --exclude EXCLUDE [EXCLUDE ...]\n                        Paths to exclude when processing directories.\n  -o OUTPUT, --output OUTPUT\n                        Output file (when processing a single file). If not provided, content is written back to source file.\n  --version             show program's version number and exit\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<p>Check which files would be changed without modifying them:</p> <pre><code>uwotm8 --check myproject/\n</code></pre> <p>Convert a file and write the output to a different file:</p> <pre><code>uwotm8 american.txt -o british.txt\n</code></pre> <p>Convert only comments and docstrings in Python files:</p> <pre><code>uwotm8 --comments-only myproject/src/\n</code></pre> <p>Only convert specific file types in a directory:</p> <pre><code>uwotm8 myproject/ --include .md .rst\n</code></pre> <p>Exclude specific paths:</p> <pre><code>uwotm8 myproject/ --exclude myproject/vendor/ myproject/generated/\n</code></pre>"},{"location":"usage/#python-api-usage","title":"Python API Usage","text":"<p>For more fine-grained control, you can use the Python API:</p>"},{"location":"usage/#convert-a-string","title":"Convert a String","text":"<pre><code>from uwotm8 import convert_american_to_british_spelling\n\n# Basic usage\ntext = \"The color of the theater is gray.\"\nresult = convert_american_to_british_spelling(text)\nprint(result)  # \"The colour of the theatre is grey.\"\n\n# With strict mode\ntry:\n    result = convert_american_to_british_spelling(text, strict=True)\nexcept Exception as e:\n    print(f\"Conversion error: {e}\")\n</code></pre>"},{"location":"usage/#convert-a-file","title":"Convert a File","text":"<pre><code>from uwotm8 import convert_file\n\n# Convert a file in-place\nconvert_file(\"document.txt\")\n\n# Convert a file and write to a new file\nconvert_file(\"document.txt\", \"document_gb.txt\")\n\n# Check if changes would be made without modifying the file\nwould_change = convert_file(\"document.txt\", check=True)\nif would_change:\n    print(\"File would be modified\")\nelse:\n    print(\"No changes needed\")\n</code></pre>"},{"location":"usage/#convert-only-comments-and-docstrings-in-python-files","title":"Convert Only Comments and Docstrings in Python Files","text":"<pre><code>from uwotm8 import convert_python_comments_only\n\n# Convert only comments and docstrings in a Python file, preserving code\nconvert_python_comments_only(\"script.py\")\n\n# Convert comments/docstrings and write to a new file\nconvert_python_comments_only(\"script.py\", \"script_gb.py\")\n\n# Check mode\nwould_change = convert_python_comments_only(\"script.py\", check=True)\nif would_change:\n    print(\"Comments/docstrings would be modified\")\nelse:\n    print(\"No changes needed\")\n</code></pre>"},{"location":"usage/#process-multiple-files","title":"Process Multiple Files","text":"<pre><code>from uwotm8 import process_paths\n\n# Process multiple files and directories\ntotal, modified = process_paths([\"file1.txt\", \"directory/\"])\nprint(f\"Processed {total} files, modified {modified}\")\n\n# Check mode\ntotal, modified = process_paths([\"file1.txt\", \"directory/\"], check=True)\nprint(f\"Would modify {modified} of {total} files\")\n\n# Process only comments and docstrings in Python files\ntotal, modified = process_paths([\"src/\"], comments_only=True)\nprint(f\"Modified comments in {modified} of {total} files\")\n</code></pre>"},{"location":"usage/#stream-processing","title":"Stream Processing","text":"<pre><code>from uwotm8 import convert_stream\n\n# Process a stream of lines\nwith open(\"input.txt\", \"r\") as f:\n    for converted_line in convert_stream(f):\n        print(converted_line, end=\"\")\n</code></pre>"},{"location":"usage/#special-cases-and-context-handling","title":"Special Cases and Context Handling","text":"<p>uwotm8 includes intelligent handling of various text contexts:</p>"},{"location":"usage/#python-comments-only-mode","title":"Python Comments-Only Mode","text":"<p>When using the <code>--comments-only</code> option with Python files, only comments and docstrings are converted, leaving actual code unchanged:</p> <pre><code># Input Python file:\n# This comment has color in it\ndef set_color(color_value):\n    \"\"\"Process the color parameter.\"\"\"\n    return color_value  # Return the color\n\n# After running: uwotm8 --comments-only file.py\n# This comment has colour in it\ndef set_color(color_value):\n    \"\"\"Process the colour parameter.\"\"\"\n    return color_value  # Return the colour\n</code></pre> <p>This is particularly useful for maintaining code functionality while ensuring documentation follows British English spelling conventions.</p>"},{"location":"usage/#parameter-name-preservation","title":"Parameter Name Preservation","text":"<p>When converting Python docstrings, parameter names in docstring sections are preserved in their original form to maintain consistency with the code:</p> <pre><code># Original:\ndef process_data(color_map, flavor_list):\n    \"\"\"Process data.\n\n    Args:\n        color_map: A mapping of colors to values.\n        flavor_list: A list of flavors to process.\n    \"\"\"\n    return color_map\n\n# After conversion with --comments-only:\ndef process_data(color_map, flavor_list):\n    \"\"\"Process data.\n\n    Args:\n        color_map: A mapping of colours to values.\n        flavor_list: A list of flavours to process.\n    \"\"\"\n    return color_map\n</code></pre> <p>Notice how \"color_map\" and \"flavor_list\" remain unchanged in the parameter names, while descriptive text is converted.</p>"},{"location":"usage/#hyphenated-terms","title":"Hyphenated Terms","text":"<p>Words that are part of hyphenated terms are preserved in their original form. For example:</p> <pre><code>echo \"The colors are red and blue, but a 3-color system is used.\" | uwotm8\n# Output: \"The colours are red and blue, but a 3-color system is used.\"\n</code></pre> <p>This is useful for preserving technical terminology and compound adjectives where conversion might be inappropriate.</p>"},{"location":"usage/#code-blocks","title":"Code Blocks","text":"<p>Words within code blocks (surrounded by backticks) are not converted:</p> <pre><code>echo \"The `setColor(color)` function sets the color.\" | uwotm8\n# Output: \"The `setColor(color)` function sets the colour.\"\n</code></pre>"},{"location":"usage/#urls-and-uris","title":"URLs and URIs","text":"<p>Words that appear in lines containing URLs or URIs are not converted:</p> <pre><code>echo \"Visit http://example.com/color-picker to select a color.\" | uwotm8\n# Output: \"Visit http://example.com/color-picker to select a colour.\"\n</code></pre>"},{"location":"usage/#technical-terms-ignore-list","title":"Technical Terms Ignore List","text":"<p>An ignore list of technical terms that shouldn't be converted is maintained:</p> <pre><code>echo \"This program uses an analog signal processor.\" | uwotm8\n# Output: \"This program uses an analog signal processor.\"\n</code></pre> <p>Common ignored terms include:</p> <ul> <li>\"program\" (vs \"programme\") in computing contexts</li> <li>\"disk\" (vs \"disc\") in computing contexts</li> <li>\"analog\" (vs \"analogue\") in technical contexts</li> <li>\"filet\" (vs \"fillet\") in culinary contexts</li> </ul>"}]}